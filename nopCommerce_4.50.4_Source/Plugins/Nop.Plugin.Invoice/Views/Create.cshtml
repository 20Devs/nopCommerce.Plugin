
@inject INopHtmlHelper NopHtml

@model Nop.Plugin.Invoice.Models.InvoiceSellViewModel

@{
    Layout = "_ColumnsOne";


    NopHtml.AppendScriptParts(ResourceLocation.Head, "~/Plugins/Invoice/Content/js/devextreme/aspnet/dx.aspnet.data.js");
    NopHtml.AppendScriptParts(ResourceLocation.Head, "~/Plugins/Invoice/Content/js/devextreme/aspnet/dx.aspnet.mvc.js");
    NopHtml.AppendScriptParts(ResourceLocation.Head, "~/Plugins/Invoice/Content/js/devextreme/dx.all.js");
    NopHtml.AppendScriptParts(ResourceLocation.Head, "~/Plugins/Invoice/Content/js/devextreme/bootstrap.js");
    NopHtml.AppendScriptParts(ResourceLocation.Head, "~/Plugins/Invoice/Content/js/InvoiceSell.js", "~/Plugins/Invoice/Content/js/InvoiceSell.js", true);


    NopHtml.AppendCssFileParts("~/Plugins/Invoice/Content/css/devextreme/Charset.css");
    NopHtml.AppendCssFileParts("~/Plugins/Invoice/Content/css/devextreme/bootstrap.css");
    NopHtml.AppendCssFileParts("~/Plugins/Invoice/Content/css/devextreme/dx.common.css");
    NopHtml.AppendCssFileParts("~/Plugins/Invoice/Content/css/devextreme/dx.light.css");
     
}

<div class="container">
    <div class="row">
        <form
            asp-antiforgery="true"
            asp-controller="Invoice"
            asp-action="Create"
            method="post"
            id="invoiceSell">

            <input type="hidden" asp-for="invoiceNo"/>
            <input type="hidden" asp-for="Rows"/> 

            <div class="form-row mb-2">

                <div class="col-md-6 col-lg-4">
                    @(Html
                        .DevExtreme()
                        .TextBoxFor(x => x.dateH)
                        .Width("100%")
                        .Label(nameof(InvoiceSellViewModel.dateH))
                        .LabelMode(EditorLabelMode.Floating))
                </div>
                <div class="col-md-6 col-lg-4">
                    @(Html
                        .DevExtreme()
                        .DateBoxFor(x => x.dateG)
                        .Width("100%")
                        .Label(nameof(InvoiceSellViewModel.dateG))
                        .LabelMode(EditorLabelMode.Floating))
                </div>
                <div class="col-md-6 col-lg-4">
                    @(Html
                        .DevExtreme()
                        .NumberBoxFor(x => x.invoiceNo)
                        .Width("100%")
                        .Label(nameof(InvoiceSellViewModel.invoiceNo))
                        .LabelMode(EditorLabelMode.Floating)
                        )
                </div>
            </div>
            <div class="form-row mb-2">

                <div class="col-md-6 col-lg-4">
                    @(Html
                        .DevExtreme()
                        .TextBoxFor(x => x.eName)
                        .Width("100%")
                        .Label(nameof(InvoiceSellViewModel.eName))
                        .LabelMode(EditorLabelMode.Floating))
                </div>
                <div class="col-md-6 col-lg-4">
                    @(Html
                        .DevExtreme().TextBoxFor(x => x.mainContact1)
                        .Width("100%")
                        .Label(nameof(InvoiceSellViewModel.mainContact1))
                        .LabelMode(EditorLabelMode.Floating))
                </div>
                <div class="col-md-6 col-lg-4">
                    @(Html
                        .DevExtreme()
                        .TextBoxFor(x => x.aName)
                        .Width("100%")
                        .Label(nameof(InvoiceSellViewModel.aName))
                        .LabelMode(EditorLabelMode.Floating))
                </div>

            </div>
            <div class="form-row mb-2">

                <div class="col-md-6 col-lg-4">
                    @(Html
                        .DevExtreme()
                        .NumberBoxFor(x => x.invoiceVATID)
                        .Width("100%")
                        .Label(nameof(InvoiceSellViewModel.invoiceVATID))
                        .LabelMode(EditorLabelMode.Floating))
                </div>
                <div class="col-md-6 col-lg-4">
                    @(Html
                        .DevExtreme()
                        .TextBoxFor(x => x.clientVendorNo)
                        .Width("100%")
                        .Label(nameof(InvoiceSellViewModel.clientVendorNo))
                        .LabelMode(EditorLabelMode.Floating))
                </div>


            </div>
            <div class="row">
                <div class="col-12">

                    @(Html
                        .DevExtreme()
                        .DataGrid<InvoiceSellUnitViewModel>()
                        .ID("gridContainer")
                        .DataSource(Model?.sellUnits, (nameof(InvoiceSellUnitViewModel.Key)))
                        .StateStoring(s => s
                            .Enabled(true)
                            .Type(StateStoringType.LocalStorage)
                            .StorageKey("InvoiceSellUnit")
                        )
                        .ShowBorders(true)
                        .RemoteOperations(false)
                        .RepaintChangesOnly(true)
                        .FilterRow(f => f.Visible(true))
                        .HeaderFilter(h => h.Visible(true))
                        .Editing
                        (e => e
                            .Mode(GridEditMode.Row)
                            .AllowAdding(true)
                            .AllowDeleting(true)
                            .AllowUpdating(false)
                            .UseIcons(true)
                        )
                        .Columns(columns =>
                        {
                            columns.AddFor(m => m.orderNo).DataType(GridColumnDataType.Number);
                            columns.AddFor(m => m.itemNo).DataType(GridColumnDataType.Number);
                            columns.AddFor(m => m.eName);
                            columns.AddFor(m => m.aName);
                            columns.AddFor(m => m.unitNo).DataType(GridColumnDataType.Number);
                            columns.AddFor(m => m.price).DataType(GridColumnDataType.Number);
                            columns.AddFor(m => m.quantity).DataType(GridColumnDataType.Number);
                            columns.AddFor(m => m.discount).DataType(GridColumnDataType.Number);
                            columns.AddFor(m => m.total).DataType(GridColumnDataType.Number);
                            columns.AddFor(m => m.taxRate1_Percentage).DataType(GridColumnDataType.Number);
                            columns.AddFor(m => m.taxRate1_Total).DataType(GridColumnDataType.Number);
                            columns.AddFor(m => m.totalPlusTax).DataType(GridColumnDataType.Number);
                            columns
                                .Add()
                                .Type(GridCommandColumnType.Buttons)
                                .Buttons(b =>
                                {

                                    b.Add().Name("delete");
                                    b.Add().Name("save");
                                    b.Add().Name("cancel");
                                });
                        })

                        .OnInitNewRow       ("OnInitNewRow")
                        .OnEditorPrepared   ("onEditorPrepared")
                        
                        )

                </div>
            </div>
            <hr/>

            <div class="row">
                <div class="col">
                    @(
    Html
        .DevExtreme()
        .Button()
        .Text("Save")
        .Type(ButtonType.Success)
        .UseSubmitBehavior(true)
                        )

                </div>
            </div>
        </form>
    </div>


</div>